import { TextBricksEngine } from '@textbricks/core';
import { ExtendedCard } from '@textbricks/shared';
import { VSCodePlatform } from '../../../adapters/vscode/VSCodePlatform';

/**
 * TopicRenderer - ‰∏ªÈ°åË¶ñÂúñÊ∏≤ÊüìÂô®
 *
 * Ë≤†Ë≤¨ÁîüÊàê‰∏ªÈ°åÂàóË°®ÂíåÁâπÂÆö‰∏ªÈ°åÁöÑ HTML
 */
export class TopicRenderer {
    constructor(
        private readonly templateEngine: TextBricksEngine,
        private readonly platform: VSCodePlatform,
        private readonly getCurrentTopicPath: () => string,
        private readonly isFavorite: (itemId: string) => boolean,
        private readonly generateTopicCardHtml: (card: ExtendedCard) => string,
        private readonly generateLinkCardHtml: (card: ExtendedCard) => string,
        private readonly generateTemplateCardFromCard: (card: ExtendedCard) => string,
        private readonly escapeHtml: (text: string | undefined | null) => string
    ) {}

    /**
     * Ê™¢Êü•ÊñáÊ™îÊòØÂê¶Â≠òÂú®
     * ËôïÁêÜÊñáÊ™îÂèØËÉΩÊòØÂ≠ó‰∏≤ÊàñÁâ©‰ª∂ÁöÑÊÉÖÊ≥Å
     */
    private hasDocumentation(documentation: any): boolean {
        if (!documentation) return false;
        if (typeof documentation === 'string') {
            return documentation.trim().length > 0;
        }
        if (typeof documentation === 'object') {
            // Check if content exists and is non-empty
            if (documentation.content && typeof documentation.content === 'string') {
                return documentation.content.trim().length > 0;
            }
            // Also check for path or url
            return !!(documentation.path || documentation.url);
        }
        return false;
    }

    /**
     * ÁîüÊàê‰∏ªÈ°åÂàóË°® HTML
     */
    generateTopicsHtml(topics: string[]): string {
        const currentTopicPath = this.getCurrentTopicPath();

        // Áç≤ÂèñÊâÄÊúâÂç°Áâá
        const allCards = this.templateEngine.getAllCards();
        this.platform.logInfo(`getAllCards() returned ${allCards.length} cards, currentTopicPath: ${currentTopicPath}`, 'TopicRenderer');

        // If we're in a specific topic, filter cards for that topic
        if (currentTopicPath) {
            return this.generateSpecificTopicHtml(allCards, currentTopicPath);
        }

        // Otherwise show top-level topics (ÂéüÊúâÁöÑÈÇèËºØ)
        const rootTopics = this.templateEngine.getRootTopics?.() || [];
        const rootTopicNames = new Set(rootTopics.map(t => t.name));

        this.platform.logInfo(`Root topics: ${Array.from(rootTopicNames).join(', ')}`, 'TopicRenderer');

        // Âè™‰øùÁïôÂ±¨ÊñºÈ†ÇÂ±§‰∏ªÈ°åÁöÑÂç°Áâá
        const topLevelCards = allCards.filter(card => card.topicPath && rootTopicNames.has(card.topicPath));

        // Êåâ‰∏ªÈ°åÂàÜÁµÑ
        const cardsByMainTopic = new Map<string, ExtendedCard[]>();
        topLevelCards.forEach(card => {
            const mainTopic = card.topicPath || '';
            if (!cardsByMainTopic.has(mainTopic)) {
                cardsByMainTopic.set(mainTopic, []);
            }
            cardsByMainTopic.get(mainTopic)!.push(card);
        });

        this.platform.logInfo(`Topics: ${Array.from(cardsByMainTopic.keys()).join(', ')}`, 'TopicRenderer');

        // ÁÇ∫ÊØèÂÄãÈ†ÇÂ±§‰∏ªÈ°åÁîüÊàê HTML
        return Array.from(cardsByMainTopic.entries()).map(([mainTopicName, allCardsInTopic]) => {
            if (allCardsInTopic.length === 0) {
                return ''; // Don't show empty topics
            }

            // ÊâÄÊúâÂç°ÁâáÈÉΩÊòØÁï∂ÂâçÂ±§Á¥öÁöÑ
            const currentLevelCards = allCardsInTopic;

            // Â∞áÁï∂ÂâçÂ±§Á¥öÁöÑÂç°Áâá‰æùÈ°ûÂûãÂàÜÁµÑ
            const topicCards = currentLevelCards.filter(card => card.type === 'topic');
            const templateCards = currentLevelCards.filter(card => card.type === 'template');
            const linkCards = currentLevelCards.filter(card => card.type === 'link');

            this.platform.logInfo(`Topic "${mainTopicName}": currentLevel=${currentLevelCards.length}, topics=${topicCards.length}, templates=${templateCards.length}, links=${linkCards.length}`, 'TopicRenderer');

            const cardsHtml = [
                ...topicCards.map(card => this.generateTopicCardHtml(card)),
                ...templateCards.map(card => this.generateTemplateCardFromCard(card)),
                ...linkCards.map(card => this.generateLinkCardHtml(card))
            ].join('');

            // Áç≤Âèñ‰∏ªÈ°åÁâ©‰ª∂Ë≥áË®ä
            const topicName = mainTopicName.split('/').pop() || mainTopicName;
            const allTopicConfigs = this.templateEngine.getAllTopicConfigs();
            const managedTopic = allTopicConfigs.find(t => t.name === topicName);

            // Ë®àÁÆó‰∏ªÈ°å‰∏ãÁöÑÂç°ÁâáÂíåÂ≠ê‰∏ªÈ°åÂÖßÂÆπÁ∏ΩÊï∏
            const currentLevelCount = currentLevelCards.length;
            const subtopicCounts = this.getSubtopicCounts(mainTopicName, allCardsInTopic);

            let topicDescription = managedTopic?.description || `${mainTopicName} Áõ∏ÈóúÂÖßÂÆπ`;

            if (managedTopic && managedTopic.description) {
                topicDescription = managedTopic.description;
            }

            // Check if topic has documentation
            const hasDocumentation = managedTopic && this.hasDocumentation(managedTopic.documentation);

            // Check if main topic has navigable content
            const hasSubTopics = topicCards.length > 0;
            const hasTopicLinks = linkCards.filter(card =>
                card.target && !card.target.startsWith('http')
            ).length > 0;
            const hasNavigableContent = hasSubTopics || hasTopicLinks;

            const topicColor = managedTopic?.display?.color;
            const topicColorStyles = topicColor ?
                `data-topic-color style="--topic-color: ${topicColor}; --topic-color-light: ${topicColor}20; --topic-color-medium: ${topicColor}80;"` : '';

            // Ë®àÁÆó‰∏çÂêåÈ°ûÂûãÁöÑÊï∏ÈáèÂíåÂ≠ê‰∏ªÈ°åÁµ±Ë®à
            const countText = this.generateMainTopicCountText(topicCards.length, templateCards.length, linkCards.length, subtopicCounts);

            return `
                <div class="topic-group main-topic" data-topic="${mainTopicName}" ${topicColorStyles}>
                    <div class="topic-header">
                        <div class="topic-title-row">
                            <h3 class="topic-title">
                                <span class="topic-toggle"></span>
                                ${managedTopic?.display?.icon ? `<span class="topic-icon">${managedTopic.display.icon}</span>` : ''}
                                ${managedTopic?.title || mainTopicName}
                            </h3>
                            <div class="topic-actions">
                                <button class="action-btn favorite-btn"
                                        data-item-id="${mainTopicName}"
                                        title="${this.isFavorite(mainTopicName) ? 'ÂèñÊ∂àÊî∂Ëóè' : 'Âä†ÂÖ•Êî∂Ëóè'}">
                                    <span class="icon">${this.isFavorite(mainTopicName) ? '‚ù§Ô∏è' : '‚ô°'}</span>
                                </button>
                                ${hasDocumentation ? `
                                    <button class="topic-doc-btn"
                                            data-topic-name="${topicName}"
                                            title="Êü•Áúã ${mainTopicName} ÁöÑË©≥Á¥∞Ë™™ÊòéÊñá‰ª∂">
                                        üìñ
                                    </button>
                                ` : ''}
                                ${hasNavigableContent ? `
                                    <button class="action-btn navigate-btn topic-navigate-btn"
                                            data-topic-path="${mainTopicName}"
                                            title="ÈÄ≤ÂÖ• ${mainTopicName} ‰∏ªÈ°å">
                                        <span class="icon">></span>
                                    </button>
                                ` : ''}
                            </div>
                        </div>
                        <p class="topic-description">${this.escapeHtml(topicDescription)}</p>
                        <p class="topic-count">${countText}</p>
                    </div>
                    <div class="templates-grid">
                        ${cardsHtml}
                    </div>
                </div>
            `;
        }).join('');
    }

    /**
     * ÁîüÊàêÁâπÂÆö‰∏ªÈ°åÁöÑ HTML
     */
    generateSpecificTopicHtml(allCards: ExtendedCard[], topicPath: string): string {
        // Get all cards that belong to the current topic path
        const currentPathCards = allCards.filter(card => card.topicPath === topicPath);

        // Separate current level cards by type
        const currentTopicCards = currentPathCards.filter(card => card.type === 'topic');
        const currentTemplateCards = currentPathCards.filter(card => card.type === 'template');
        const currentLinkCards = currentPathCards.filter(card => card.type === 'link');

        let html = '';

        // Â¶ÇÊûúÊúâÂ≠ê‰∏ªÈ°åÔºåÂ∞áÂÆÉÂÄëÁï∂‰ΩúÈ†ÇÂ±§‰∏ªÈ°åÈ°ØÁ§∫ÔºàÂ±ïÈñãÈ°ØÁ§∫Â≠ê‰∏ªÈ°åÁöÑÂÖßÂÆπÔºâ
        if (currentTopicCards.length > 0) {
            html = currentTopicCards.map(topicCard => {
                // Áç≤ÂèñÂ≠ê‰∏ªÈ°åÁöÑÊâÄÊúâÂç°Áâá
                const subtopicCards = allCards.filter(card => card.topicPath === topicCard.target);
                const subtopicTemplates = subtopicCards.filter(card => card.type === 'template');
                const subtopicLinks = subtopicCards.filter(card => card.type === 'link');
                const subtopicSubtopics = subtopicCards.filter(card => card.type === 'topic');

                const cardsHtml = [
                    ...subtopicSubtopics.map(card => this.generateTopicCardHtml(card)),
                    ...subtopicTemplates.map(card => this.generateTemplateCardFromCard(card)),
                    ...subtopicLinks.map(card => this.generateLinkCardHtml(card))
                ].join('');

                // Áç≤ÂèñÂ≠ê‰∏ªÈ°åË≥áË®ä
                const allTopics = this.templateEngine.getAllTopicConfigs?.() || [];
                // Extract topic name from target path (e.g., "c/00-beginner" -> "00-beginner")
                const topicName = topicCard.target?.split('/').pop() || topicCard.target;
                const managedTopic = allTopics.find(t => t.name === topicName);
                const topicDisplayName = topicCard.title;
                const topicDescription = topicCard.description;

                const topicCount = subtopicSubtopics.length;
                const templateCount = subtopicTemplates.length;
                const linkCount = subtopicLinks.length;
                const countText = this.generateCardCountText(topicCount, templateCount, linkCount);

                const hasDocumentation = managedTopic && this.hasDocumentation(managedTopic.documentation);
                const hasNavigableContent = subtopicSubtopics.length > 0 || subtopicLinks.some(card => card.target && !card.target.startsWith('http'));

                return `
                    <div class="topic-group main-topic" data-topic="${topicCard.target}">
                        <div class="topic-header">
                            <div class="topic-title-row">
                                <h3 class="topic-title">
                                    <span class="topic-toggle"></span>
                                    ${managedTopic?.display?.icon ? `<span class="topic-icon">${managedTopic.display.icon}</span>` : '<span class="topic-icon">üìÅ</span>'}
                                    ${topicDisplayName}
                                </h3>
                                <div class="topic-actions">
                                    <button class="action-btn favorite-btn"
                                            data-item-id="${topicCard.target}"
                                            title="${this.isFavorite(topicCard.target || '') ? 'ÂèñÊ∂àÊî∂Ëóè' : 'Âä†ÂÖ•Êî∂Ëóè'}">
                                        <span class="icon">${this.isFavorite(topicCard.target || '') ? '‚ù§Ô∏è' : '‚ô°'}</span>
                                    </button>
                                    ${hasDocumentation ? `
                                        <button class="topic-doc-btn"
                                                data-topic-name="${managedTopic?.name || topicCard.target}"
                                                title="Êü•ÁúãË©≥Á¥∞Ë™™ÊòéÊñá‰ª∂">
                                            üìñ
                                        </button>
                                    ` : ''}
                                    ${hasNavigableContent ? `
                                        <button class="action-btn navigate-btn topic-navigate-btn"
                                                data-topic-path="${topicCard.target}"
                                                title="ÈÄ≤ÂÖ• ${topicDisplayName} ‰∏ªÈ°å">
                                            <span class="icon">></span>
                                        </button>
                                    ` : ''}
                                </div>
                            </div>
                            <p class="topic-description">${this.escapeHtml(topicDescription)}</p>
                            <p class="topic-count">${countText}</p>
                        </div>
                        <div class="templates-grid">
                            ${cardsHtml || '<p class="no-content">Ê≠§‰∏ªÈ°åÊö´ÁÑ°ÂÖßÂÆπ</p>'}
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Â¶ÇÊûúÁï∂ÂâçÂ±§Á¥öÊúâÂâ©È§òÁöÑÊ®°ÊùøÊàñÈÄ£ÁµêÔºà‰∏çÂ±¨ÊñºÂ≠ê‰∏ªÈ°åÁöÑÔºâÔºåÈõÜ‰∏≠È°ØÁ§∫
        if (currentTemplateCards.length > 0 || currentLinkCards.length > 0) {
            const allTopics = this.templateEngine.getAllTopicConfigs?.() || [];
            const topicName = topicPath.split('/').pop() || topicPath;
            const managedTopic = allTopics.find(t => t.name === topicName);
            const topicDisplayName = managedTopic?.title || topicPath;

            const templatesHtml = currentTemplateCards.map(card => this.generateTemplateCardFromCard(card)).join('');
            const linksHtml = currentLinkCards.map(card => this.generateLinkCardHtml(card)).join('');

            const templateCount = currentTemplateCards.length;
            const linkCount = currentLinkCards.length;
            const countText = this.generateCardCountText(0, templateCount, linkCount);

            const hasDocumentation = managedTopic && this.hasDocumentation(managedTopic.documentation);

            html += `
                <div class="topic-group main-topic" data-topic="${topicPath}">
                    <div class="topic-header">
                        <div class="topic-title-row">
                            <h3 class="topic-title">
                                <span class="topic-toggle"></span>
                                ${managedTopic?.display?.icon ? `<span class="topic-icon">${managedTopic.display.icon}</span>` : '<span class="topic-icon">üìÅ</span>'}
                                ${topicDisplayName}
                            </h3>
                            <div class="topic-actions">
                                <button class="action-btn favorite-btn"
                                        data-item-id="${topicPath}"
                                        title="${this.isFavorite(topicPath) ? 'ÂèñÊ∂àÊî∂Ëóè' : 'Âä†ÂÖ•Êî∂Ëóè'}">
                                    <span class="icon">${this.isFavorite(topicPath) ? '‚ù§Ô∏è' : '‚ô°'}</span>
                                </button>
                                ${hasDocumentation ? `
                                    <button class="topic-doc-btn"
                                            data-topic-name="${managedTopic?.name || topicPath}"
                                            title="Êü•ÁúãË©≥Á¥∞Ë™™ÊòéÊñá‰ª∂">
                                        üìñ
                                    </button>
                                ` : ''}
                            </div>
                        </div>
                        <p class="topic-description">${managedTopic?.description || `${topicDisplayName} ÁöÑÂÖ∂‰ªñÂÖßÂÆπ`}</p>
                        <p class="topic-count">${countText}</p>
                    </div>
                    <div class="templates-grid">
                        ${templatesHtml}
                        ${linksHtml}
                    </div>
                </div>
            `;
        }

        return html || '<div class="topic-group"><p>Ê≤íÊúâÊâæÂà∞Áõ∏ÈóúÂÖßÂÆπ</p></div>';
    }

    /**
     * ÁîüÊàêÂç°ÁâáË®àÊï∏ÊñáÂ≠ó
     */
    private generateCardCountText(topicCount: number, templateCount: number, linkCount: number): string {
        const counts = [];
        if (topicCount > 0) {counts.push(`${topicCount} ÂÄã‰∏ªÈ°å`);}
        if (templateCount > 0) {counts.push(`${templateCount} ÂÄãÊ®°Êùø`);}
        if (linkCount > 0) {counts.push(`${linkCount} ÂÄãÈÄ£Áµê`);}
        return counts.join('„ÄÅ');
    }

    /**
     * Áç≤ÂèñÂ≠ê‰∏ªÈ°åË®àÊï∏
     */
    private getSubtopicCounts(mainTopic: string, allCards: ExtendedCard[]): {[key: string]: number} {
        const subtopicCounts: {[key: string]: number} = {};

        allCards.forEach(card => {
            if (card.topicPath && card.topicPath.startsWith(mainTopic + '/')) {
                const subtopic = card.topicPath.split('/')[1];
                if (subtopic) {
                    subtopicCounts[subtopic] = (subtopicCounts[subtopic] || 0) + 1;
                }
            }
        });

        return subtopicCounts;
    }

    /**
     * ÁîüÊàê‰∏ª‰∏ªÈ°åË®àÊï∏ÊñáÂ≠ó
     */
    private generateMainTopicCountText(topicCount: number, templateCount: number, linkCount: number, subtopicCounts: {[key: string]: number}): string {
        const counts = [];
        if (topicCount > 0) {counts.push(`${topicCount} ÂÄã‰∏ªÈ°å`);}
        if (templateCount > 0) {counts.push(`${templateCount} ÂÄãÊ®°Êùø`);}
        if (linkCount > 0) {counts.push(`${linkCount} ÂÄãÈÄ£Áµê`);}

        const subtopicTemplateCount = Object.values(subtopicCounts).reduce((sum, count) => sum + count, 0);
        if (subtopicTemplateCount > 0) {
            counts.push(`Â≠ê‰∏ªÈ°å ${subtopicTemplateCount} ÂÄãÈ†ÖÁõÆ`);
        }

        return counts.join('„ÄÅ') || 'ÁÑ°ÂÖßÂÆπ';
    }
}
