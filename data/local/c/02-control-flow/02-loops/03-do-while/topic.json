{
  "type": "topic",
  "name": "03-do-while",
  "title": "do-while 迴圈",
  "description": "至少執行一次的迴圈",
  "documentation": {
    "content": "# do-while 迴圈\n\n## 語法結構\n\n```c\ndo {\n    // 迴圈主體\n} while (條件);\n```\n\n## 執行流程\n1. 執行迴圈主體（至少執行一次）\n2. 檢查條件\n3. 若條件為真，回到步驟 1\n4. 若條件為假，跳出迴圈\n\n## 與 while 的差異\n\n- **while**：先檢查條件，再執行（可能一次都不執行）\n- **do-while**：先執行，再檢查（至少執行一次）\n\n## 常見用途\n\n### 選單系統\n```c\nint choice;\ndo {\n    printf(\"1. 選項1\\n\");\n    printf(\"2. 選項2\\n\");\n    printf(\"0. 離開\\n\");\n    scanf(\"%d\", &choice);\n    // 處理選項\n} while (choice != 0);\n```\n\n### 輸入驗證\n```c\nint num;\ndo {\n    printf(\"請輸入 1-10 的數字：\");\n    scanf(\"%d\", &num);\n} while (num < 1 || num > 10);\n```\n\n### 遊戲迴圈\n```c\nchar playAgain;\ndo {\n    // 遊戲邏輯\n    printf(\"再玩一次？(y/n)\");\n    scanf(\" %c\", &playAgain);\n} while (playAgain == 'y' || playAgain == 'Y');\n```\n"
  },
  "display": {
    "icon": "🔁",
    "color": "#9C27B0",
    "order": 3
  }
}