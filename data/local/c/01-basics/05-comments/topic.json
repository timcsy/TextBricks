{
  "type": "topic",
  "name": "05-comments",
  "title": "註解",
  "description": "學習如何撰寫程式碼註解",
  "documentation": {
    "content": "# 註解\n\n## 學習目標\n\n- 理解註解的重要性\n- 學會撰寫單行註解\n- 學會撰寫多行註解\n- 掌握註解的最佳實踐\n\n## 註解類型\n\n### 單行註解\n使用 `//` 開頭，註解至該行結束\n```c\n// 這是單行註解\nint x = 10;  // 也可以放在程式碼後面\n```\n\n### 多行註解\n使用 `/* */` 包圍，可跨多行\n```c\n/*\n * 這是多行註解\n * 可以寫很多行\n * 用來說明複雜的邏輯\n */\n```\n\n## 註解的用途\n\n1. **說明程式碼功能**\n```c\n// 計算兩數的平均值\nfloat average = (a + b) / 2.0;\n```\n\n2. **標記待辦事項**\n```c\n// TODO: 加入錯誤處理\n// FIXME: 修正除以零的問題\n```\n\n3. **暫時停用程式碼**\n```c\n// printf(\"除錯訊息\\n\");\n```\n\n4. **文件化函式**\n```c\n/**\n * 計算兩個整數的和\n * @param a 第一個整數\n * @param b 第二個整數\n * @return 兩數之和\n */\nint add(int a, int b) {\n    return a + b;\n}\n```\n\n## 註解最佳實踐\n\n### ✅ 好的註解\n- 說明「為什麼」這樣寫\n- 解釋複雜的演算法\n- 標記重要的業務邏輯\n- 警告潛在的問題\n\n### ❌ 不好的註解\n- 重述顯而易見的程式碼\n- 過時或錯誤的註解\n- 過多的註解造成干擾\n\n## 例子\n\n```c\n// 好的註解\n// 使用二分搜尋法提升效能（O(log n)）\nint binarySearch(int arr[], int target) {\n    // ...\n}\n\n// 不必要的註解\n// 將 x 設為 10\nint x = 10;  // 這個註解沒有提供額外資訊\n```\n"
  },
  "display": {
    "icon": "💬",
    "color": "#2196F3",
    "order": 5
  }
}
